SELECT GETDATE() AS CurrentTime;

SELECT name FROM sys.databases;

CREATE DATABASE SigmaTB;

--Use the DB
USE SigmaTB;







-- Generate a COUNT(*) query for each table
    DECLARE @sql NVARCHAR(MAX) = N'';   

    -- Generate a COUNT(*) query for each table
    SELECT @sql += 'SELECT ''' + TABLE_SCHEMA + '.' + TABLE_NAME + ''' AS TableName, COUNT(*) AS RecordCount FROM ' + QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME) + ' UNION ALL '
    FROM INFORMATION_SCHEMA.TABLES
    WHERE TABLE_TYPE = 'BASE TABLE';

    -- Remove the last "UNION ALL"
    SET @sql = LEFT(@sql, LEN(@sql) - 10);

    -- Execute the generated SQL
    EXEC sp_executesql @sql;


select * from ROPData
select count(*) from ropdata
select unique

select count(*) from ropdata where Vndr NOT LIKE 'N%';
SELECT * FROM ROPData WHERE Vndr NOT LIKE 'N%' AND OD like '14';
SELECT * FROM ROPData WHERE Vndr NOT LIKE 'N%' AND Vndr like 'HAL';


SELECT Item, Description,[con/wk] FROM ROPDATA WHERE Item = '51503';

SELECT * FROM SalesData WHERE CALPHA LIKE 'AERO%';
sELECT COUNT(*) FROM ROPData;

--let me try to get the MP processing
SELECT * from UsageData where IHITEM = 50002;
SELECT [IHITEM], [IHTRNT],[IHTQTY], [Column2]   from UsageData where IHITEM = 50002;

select '50002IN950654000000075320240503'

SELECT 
    CASE 
        WHEN CHARINDEX('202405', [Column2]) > 0 THEN 'Yes'
        ELSE 'No'
    END AS ContainsText
FROM UsageData;


SELECT [IHITEM], [IHTRNT],[IHTQTY], [Column2] 
FROM UsageData
WHERE CHARINDEX('202405', [Column2]) > 0;


--///////////////////////////////////////////
--Get cost of material processing on 1 item
SELECT 
    SUM(IHTQTY) AS TotalQuantity
FROM 
    UsageData
WHERE 
    [Column2] LIKE '50002MP________________202409__';
--///////////////////////////////////////////
--///////////////////////////////////////////
--///////////////////////////////////////////



SELECT 
    SUM(IHTQTY) AS total_quantity
FROM 
    UsageData
WHERE 
    IHITEM = 50002
    AND CAST(IHTRNT AS VARCHAR(MAX)) = 'MP'
    AND IHTRN# = 402074
    AND IHVNDR = 121
    AND LEFT(CAST(Column1 AS VARCHAR(20)), 6) = '202409';


SELECT 
    IHITEM, IHTRNT, IHTRN#, IHVNDR, Column1, IHTQTY
FROM 
    UsageData
WHERE 
    IHITEM = 50002
    AND CAST(IHTRNT AS VARCHAR(MAX)) = 'MP'
    AND IHTRN# = 402074
    AND IHVNDR = 121
    AND LEFT(CAST(Column1 AS VARCHAR(20)), 6) = '202409';


SELECT * FROM UsageData WHERE IHITEM = '50002';
SELECT DISTINCT IHTRNT FROM UsageData;
SELECT DISTINCT IHTRN# FROM UsageData WHERE IHITEM = 50002;

SELECT DISTINCT Column1 FROM UsageData WHERE IHITEM = 50002;


SELECT TOP 10 IHTRNT 
FROM UsageData 
WHERE CAST(IHTRNT AS VARCHAR(MAX)) LIKE '%MP%';




SELECT 
    IHITEM, IHTRNT, IHTRN#, IHVNDR, IHCUST Column1, IHTQTY
FROM 
    UsageData
WHERE 
    CAST(IHTRNT AS VARCHAR(10)) = 'CR';

SELECT 
    *
FROM 
    UsageData
WHERE 
    CAST(IHTRNT AS VARCHAR(10)) = 'CR';

SELECT 
    u.*, 
    u2.CALPHA AS CustomerName
FROM 
    UsageData u
LEFT JOIN 
    UsageData2 u2 ON u.IHCUST = u2.IHCUST
WHERE 
    CAST(u.IHTRNT AS VARCHAR(10)) = 'CR';


--where is the customer name?
DECLARE @sql NVARCHAR(MAX) = '';

SELECT @sql += 
    'SELECT TOP 1 * FROM ' + 
    QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME) + ';' + CHAR(13)
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_TYPE = 'BASE TABLE';

PRINT @sql;  -- OR SELECT @sql AS SQLText;

SELECT TOP 1 * from [dbo].[BasePrice];
SELECT TOP 1 * from [dbo].[POData];
SELECT TOP 1 * from [dbo].[POIssued];
SELECT TOP 1 * from [dbo].[ROPData]
SELECT TOP 1 * from [dbo].[SalesData];      -- customer
SELECT TOP 1 * from [dbo].[TagData];        -- availability
SELECT TOP 1 * from [dbo].[UsageData];
SELECT TOP 1 * from [dbo].[UsageData2];     -- customer 

--How many transactions are by transaction types?
    
SELECT 
    CAST(IHTRNT AS VARCHAR(10)) AS TransactionType,
    FORMAT(COUNT(*), 'N0') AS TransactionCount,
    FORMAT(SUM(IHTQTY), 'N2') AS TotalQuantity
FROM 
    UsageData
WHERE 
    CAST(IHTRNT AS VARCHAR(10)) IN ('CR', 'IA', 'IN', 'OW', 'OR')
GROUP BY 
    CAST(IHTRNT AS VARCHAR(10))
ORDER BY 
    TransactionType;

-- cool
-- so, lets gonna get the column names with description, and then identifying the customer who did the credit memos

WITH OneCustomerNamePerID AS (
    SELECT 
        IHCUST, 
        MIN(CONVERT(VARCHAR(MAX), CALPHA)) AS CALPHA
    FROM UsageData2
    GROUP BY IHCUST
)
SELECT 
    u.IHITEM AS [IHITEM (item ID)],
    u.IHCUST AS [IHCUST (customer ID)],
    c.CALPHA AS [CustomerName],
    u.IHTRN# AS [IHTRN# (transaction number)],
    u.IHTQTY AS [IHTQTY (quantity)],
    CONVERT(VARCHAR(MAX), u.Column3) AS [Column3 (quantity copy?)],
    CONVERT(VARCHAR(10), u.IHTRNT) AS [IHTRNT (transaction type)],
    CONVERT(VARCHAR(MAX), u.Column1) AS [Column1 (internal ref)],
    u.IHVNDR AS [IHVNDR (vendor)],
    u.IHTRYY AS [IHTRYY (year)],
    u.IHTRMM AS [IHTRMM (month)],
    u.IHTRDD AS [IHTRDD (day)],
    CONVERT(VARCHAR(MAX), u.Column2) AS [Column2 (composite key)],
    CONVERT(VARCHAR(MAX), u.Column4) AS [Column4 (status flag)]
FROM 
    UsageData u
LEFT JOIN 
    OneCustomerNamePerID c ON u.IHCUST = c.IHCUST
WHERE 
    CONVERT(VARCHAR(10), u.IHTRNT) = 'IA';

-- Now we query for more than 1 transaction category 
WITH OneCustomerNamePerID AS (
    SELECT 
        IHCUST, 
        MIN(CONVERT(VARCHAR(MAX), CALPHA)) AS CALPHA
    FROM UsageData2
    GROUP BY IHCUST
)
SELECT 
    u.IHITEM AS [IHITEM (item ID)],
    u.IHCUST AS [IHCUST (customer ID)],
    c.CALPHA AS [CustomerName],
    u.IHTRN# AS [IHTRN# (transaction number)],
    u.IHTQTY AS [IHTQTY (quantity)],
    CONVERT(VARCHAR(MAX), u.Column3) AS [Column3 (quantity copy?)],
    CONVERT(VARCHAR(10), u.IHTRNT) AS [IHTRNT (transaction type)],
    CONVERT(VARCHAR(MAX), u.Column1) AS [Column1 (internal ref)],
    u.IHVNDR AS [IHVNDR (vendor ID)],
    p.Vendor AS [VendorName],  -- ðŸŽ¯ pulled from POData
    u.IHTRYY AS [IHTRYY (year)],
    u.IHTRMM AS [IHTRMM (month)],
    u.IHTRDD AS [IHTRDD (day)],
    CONVERT(VARCHAR(MAX), u.Column2) AS [Column2 (composite key)],
    CONVERT(VARCHAR(MAX), u.Column4) AS [Column4 (status flag)]
FROM 
    UsageData u
LEFT JOIN 
    OneCustomerNamePerID c ON u.IHCUST = c.IHCUST
LEFT JOIN 
    POData p ON u.IHVNDR = p.[V#]
WHERE 
    CONVERT(VARCHAR(10), u.IHTRNT) IN ('OR', 'OW');


-- PURCHASE ORDERS 
WITH OneCustomerNamePerID AS (
    SELECT 
        IHCUST, 
        MIN(CONVERT(VARCHAR(MAX), CALPHA)) AS CALPHA
    FROM UsageData2
    GROUP BY IHCUST
)
SELECT 
    u.IHITEM AS [IHITEM (item ID)],
    u.IHCUST AS [IHCUST (customer ID)],
    c.CALPHA AS [CustomerName],
    u.IHTRN# AS [IHTRN# (transaction number)],
    u.IHTQTY AS [IHTQTY (quantity)],
    CONVERT(VARCHAR(MAX), u.Column3) AS [Column3 (quantity copy?)],
    CONVERT(VARCHAR(10), u.IHTRNT) AS [IHTRNT (transaction type)],
    CONVERT(VARCHAR(MAX), u.Column1) AS [Column1 (internal ref)],
    u.IHVNDR AS [IHVNDR (vendor ID)],
    p.Vendor AS [VendorName],  -- ðŸŽ¯ pulled from POData
    u.IHTRYY AS [IHTRYY (year)],
    u.IHTRMM AS [IHTRMM (month)],
    u.IHTRDD AS [IHTRDD (day)],
    CONVERT(VARCHAR(MAX), u.Column2) AS [Column2 (composite key)],
    CONVERT(VARCHAR(MAX), u.Column4) AS [Column4 (status flag)]
FROM 
    UsageData u
LEFT JOIN 
    OneCustomerNamePerID c ON u.IHCUST = c.IHCUST
LEFT JOIN 
    POData p ON u.IHVNDR = p.[V#]
WHERE 
    CONVERT(VARCHAR(10), u.IHTRNT) IN ('PO');


select * from ROPData where CONVERT(varchar(mAX), [Item]) = '50002';
SELECT count(*) from ropdata;

select * from usagedata 
where IHITEM = 50002
AND IHTRYY = 24
AND IHTRMM = 09
AND CONVERT(VARCHAR(MAX), IHTRNT) IN ('OW', 'OR');

--Select MP from Usage Data for a particular Month
select SUM(IHTQTY) from usagedata 
where IHITEM = 50002
AND IHTRYY = 24
AND IHTRMM = 09
AND CONVERT(VARCHAR(MAX), IHTRNT) IN ('OW', 'OR');

--Now lets gonna try by 12 months
SELECT 
    FORMAT(DATEFROMPARTS(2000 + IHTRYY, IHTRMM, 1), 'yyyy-MM') AS [Month],
    SUM(IHTQTY) AS [TotalMaterialProcessed]
FROM 
    UsageData
WHERE 
    CONVERT(VARCHAR(10), IHTRNT) IN ('OW', 'OR')
    AND DATEFROMPARTS(2000 + IHTRYY, IHTRMM, 1) >= DATEADD(MONTH, -13, CAST(GETDATE() AS DATE))  -- last 12 months including current
GROUP BY 
    FORMAT(DATEFROMPARTS(2000 + IHTRYY, IHTRMM, 1), 'yyyy-MM')
ORDER BY 
    [Month];


SELECT 
    FORMAT(DATEFROMPARTS(2000 + IHTRYY, IHTRMM, 1), 'yyyy-MM') AS [Month],
    SUM(IHTQTY) AS [TotalMaterialProcessed]
FROM 
    UsageData
WHERE 
    IHITEM = 50002  -- âœ… Filter to specific item
    AND CONVERT(VARCHAR(10), IHTRNT) IN ('OW', 'OR')
    AND DATEFROMPARTS(2000 + IHTRYY, IHTRMM, 1) >= DATEADD(MONTH, -13, CAST(GETDATE() AS DATE))
GROUP BY 
    FORMAT(DATEFROMPARTS(2000 + IHTRYY, IHTRMM, 1), 'yyyy-MM')
ORDER BY 
    [Month];

--///////////////////////////////////////////////////////////////////
--HERE IS IT... THE TABLE THAT RETURNS MP BY MONTH BY ITEM

-- Step 1: Generate last 13 months
WITH Last13Months AS (
    SELECT FORMAT(DATEADD(MONTH, -n, CAST(GETDATE() AS DATE)), 'yyyy-MM') AS [Month]
    FROM (SELECT TOP 13 ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) - 1 AS n FROM sys.all_objects) AS x
),
-- Step 2: Aggregate your material processing data
MonthlyProcessing AS (
    SELECT 
        FORMAT(DATEFROMPARTS(2000 + IHTRYY, IHTRMM, 1), 'yyyy-MM') AS [Month],
        SUM(IHTQTY) AS TotalMaterialProcessed
    FROM UsageData
    WHERE 
        IHITEM = 50002
        AND CONVERT(VARCHAR(10), IHTRNT) IN ('OW', 'OR')
        AND DATEFROMPARTS(2000 + IHTRYY, IHTRMM, 1) >= DATEADD(MONTH, -13, CAST(GETDATE() AS DATE))
    GROUP BY 
        FORMAT(DATEFROMPARTS(2000 + IHTRYY, IHTRMM, 1), 'yyyy-MM')
)
-- Step 3: Join and return all months
SELECT 
    l.[Month],
    FORMAT(ISNULL(m.TotalMaterialProcessed, 0), 'N3') AS [TotalMaterialProcessed]
FROM 
    Last13Months l
LEFT JOIN 
    MonthlyProcessing m ON l.Month = m.Month
ORDER BY 
    l.Month;
--///////////////////////////////////////////////////////////////////
--///////////////////////////////////////////////////////////////////


--NOW, LETS GONNA HAVE THE TABLE WITH IA, MP, SO
WITH Months AS (
    SELECT FORMAT(DATEADD(MONTH, -n, CAST(GETDATE() AS DATE)), 'yyyy-MM') AS Month
    FROM (SELECT TOP 13 ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) - 1 AS n FROM master.dbo.spt_values) AS x
),
Aggregated AS (
    SELECT
        FORMAT(DATEFROMPARTS(2000 + IHTRYY, IHTRMM, 1), 'yyyy-MM') AS Month,
        CASE 
            WHEN CONVERT(VARCHAR(10), IHTRNT) = 'IA' THEN IHTQTY
            WHEN CONVERT(VARCHAR(10), IHTRNT) IN ('OW', 'OR') THEN IHTQTY
            WHEN CONVERT(VARCHAR(10), IHTRNT) = 'IN' THEN IHTQTY
            ELSE 0
        END AS Qty,
        CONVERT(VARCHAR(10), IHTRNT) AS Type
    FROM UsageData
    WHERE IHITEM = 50002
      AND DATEFROMPARTS(2000 + IHTRYY, IHTRMM, 1) >= DATEADD(MONTH, -13, CAST(GETDATE() AS DATE))
)
SELECT 
    m.Month,
    FORMAT(SUM(CASE WHEN a.Type = 'IA' THEN a.Qty ELSE 0 END), 'N2') AS [IA (Inventory Adjustments)],
    FORMAT(SUM(CASE WHEN a.Type IN ('OW', 'OR') THEN a.Qty ELSE 0 END), 'N2') AS [MP (Material Processed)],
    FORMAT(SUM(CASE WHEN a.Type = 'IN' THEN a.Qty ELSE 0 END), 'N2') AS [SO (Sales Orders)]
FROM Months m
LEFT JOIN Aggregated a ON m.Month = a.Month
GROUP BY m.Month
ORDER BY m.Month;

--////////////////////////////////////////////////////////////
--////////////////////////////////////////////////////////////

--//////////////////////////////////////////////////////////
--////////////////////////////////////////////////////////////
-- Lets gonna describe items

selecT * FROM ROPdata where ITEM

-- they get items from ROPQuery
SELECT ITEMMAST.IMFSP2, ITEMMAST.IMITEM, ITEMMAST.IMSIZ1, 
      ITEMMAST.IMSIZ2, ITEMMAST.IMSIZ3, ITEMMAST.IMDSC2, ITEMMAST.IMWPFT, 
        ITEMONHD.IOACST, ITEMONHD.IOQOH, ITEMONHD.IOQOO, 
        IOQOR+IOQOOR, 
        ITEMMAST.IMDSC1, ITEMMAST.IMWUOM, ITEMMAST.IMCSMO
FROM S219EAAV.MW4FILE.ITEMMAST ITEMMAST, 
    S219EAAV.MW4FILE.ITEMONHD ITEMONHD
WHERE ITEMONHD.IOITEM = ITEMMAST.IMITEM AND ((ITEMMAST.IMRECD='A') AND (ITEMMAST.IMITEM Between '49999' And '90000'))
ORDER BY ITEMMAST.IMFSP2





--since i cannot convert, then i add

ALTER TABLE ROPData
ADD 
    Item_int INT NULL,
    OD_num NUMERIC(10, 2) NULL,
    ID_num NUMERIC(10, 2) NULL,
    Wall_num NUMERIC(10, 2) NULL,
    OnHand_num NUMERIC(10, 2) NULL,
    Rsrv_num NUMERIC(10, 2) NULL,
    FtPerUnit_num NUMERIC(10, 2) NULL,     -- "#/ft"
    PricePerFt_num NUMERIC(10, 2) NULL,   -- "$/ft"
    Index_num NUMERIC(10, 2) NULL,
    Level_num NUMERIC(10, 2) NULL,
    ConPerWk_num NUMERIC(10, 2) NULL,     -- "con/wk"
    TotCons_num NUMERIC(10, 2) NULL,
    Time_num NUMERIC(10, 2) NULL;

--i copy the values
-- Safely copy values to new typed columns
UPDATE ROPData
SET
    Item_int = TRY_CAST(CAST(Item AS VARCHAR(MAX)) AS INT),
    OD_num = TRY_CAST(CAST(OD AS VARCHAR(MAX)) AS NUMERIC(10,2)),
    ID_num = TRY_CAST(CAST(ID AS VARCHAR(MAX)) AS NUMERIC(10,2)),
    Wall_num = TRY_CAST(CAST(Wall AS VARCHAR(MAX)) AS NUMERIC(10,2)),
    OnHand_num = TRY_CAST(CAST([OnHand] AS VARCHAR(MAX)) AS NUMERIC(10,2)),
    Rsrv_num = TRY_CAST(CAST(Rsrv AS VARCHAR(MAX)) AS NUMERIC(10,2)),
    FtPerUnit_num = TRY_CAST(CAST([#/ft] AS VARCHAR(MAX)) AS NUMERIC(10,2)),
    PricePerFt_num = TRY_CAST(CAST([$/ft] AS VARCHAR(MAX)) AS NUMERIC(10,2)),
    Index_num = TRY_CAST(CAST([Index] AS VARCHAR(MAX)) AS NUMERIC(10,2)),
    Level_num = TRY_CAST(CAST([Level] AS VARCHAR(MAX)) AS NUMERIC(10,2)),
    ConPerWk_num = TRY_CAST(CAST([con/wk] AS VARCHAR(MAX)) AS NUMERIC(10,2)),
    TotCons_num = TRY_CAST(CAST([TotCons] AS VARCHAR(MAX)) AS NUMERIC(10,2)),
    Time_num = TRY_CAST(CAST([Time] AS VARCHAR(MAX)) AS NUMERIC(10,2));

-- now we delete the old text columns
ALTER TABLE ROPData
DROP COLUMN 
    Item,
    OD,
    ID,
    Wall,
    OnHand,
    Rsrv,
    [#/ft],
    [$/ft],
    [Index],
    [Level],
    [con/wk],
    TotCons,
    [Time];

--and then we rename the new columns to the original names
EXEC sp_rename 'ROPData.Item_int', 'Item', 'COLUMN';
EXEC sp_rename 'ROPData.OD_num', 'OD', 'COLUMN';
EXEC sp_rename 'ROPData.ID_num', 'ID', 'COLUMN';
EXEC sp_rename 'ROPData.Wall_num', 'Wall', 'COLUMN';
EXEC sp_rename 'ROPData.OnHand_num', 'OnHand', 'COLUMN';
EXEC sp_rename 'ROPData.Rsrv_num', 'Rsrv', 'COLUMN';
EXEC sp_rename 'ROPData.FtPerUnit_num', '#/ft', 'COLUMN';
EXEC sp_rename 'ROPData.PricePerFt_num', '$/ft', 'COLUMN';
EXEC sp_rename 'ROPData.Index_num', 'Index', 'COLUMN';
EXEC sp_rename 'ROPData.Level_num', 'Level', 'COLUMN';
EXEC sp_rename 'ROPData.ConPerWk_num', 'con/wk', 'COLUMN';
EXEC sp_rename 'ROPData.TotCons_num', 'TotCons', 'COLUMN';
EXEC sp_rename 'ROPData.Time_num', 'Time', 'COLUMN';


--GET THE ITEM THAT CHRIS IS REVIEWING
select [Size Text], Description, SMO
from ROPData
WHERE item = 50002;

--////////////////////////////////////////////////////////////////
--////////////////////////////////////////////////////////////////
USE SigmaTB;


-- 1. Item being reviewed
            SELECT [Size Text], Description, SMO
            FROM ROPData
            WHERE Item = 50002;

            -- 2. IA, MP, SO Summary by Month
            WITH Months AS (
                SELECT FORMAT(DATEADD(MONTH, -n, CAST(GETDATE() AS DATE)), 'yyyy-MM') AS Month
                FROM (SELECT TOP 13 ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) - 1 AS n FROM sys.all_objects) AS x
            ),
            Aggregated AS (
                SELECT
                    FORMAT(DATEFROMPARTS(2000 + IHTRYY, IHTRMM, 1), 'yyyy-MM') AS Month,
                    CASE 
                        WHEN CONVERT(VARCHAR(10), IHTRNT) = 'IA' THEN IHTQTY
                        WHEN CONVERT(VARCHAR(10), IHTRNT) IN ('OW', 'OR') THEN IHTQTY
                        WHEN CONVERT(VARCHAR(10), IHTRNT) = 'IN' THEN IHTQTY
                        ELSE 0
                    END AS Qty,
                    CONVERT(VARCHAR(10), IHTRNT) AS Type
                FROM UsageData
                WHERE IHITEM = 50002
                  AND DATEFROMPARTS(2000 + IHTRYY, IHTRMM, 1) >= DATEADD(MONTH, -13, CAST(GETDATE() AS DATE))
            )
            SELECT 
                m.Month,
                FORMAT(SUM(CASE WHEN a.Type = 'IA' THEN a.Qty ELSE 0 END), 'N2') AS [IA (Inventory Adjustments)],
                FORMAT(SUM(CASE WHEN a.Type IN ('OW', 'OR') THEN a.Qty ELSE 0 END), 'N2') AS [MP (Material Processed)],
                FORMAT(SUM(CASE WHEN a.Type = 'IN' THEN a.Qty ELSE 0 END), 'N2') AS [SO (Sales Orders)]
            FROM Months m
            LEFT JOIN Aggregated a ON m.Month = a.Month
            GROUP BY m.Month
            ORDER BY m.Month;

            -- 3. Inventory Availability
            SELECT [OnHand], [Rsrv], [OnHand] - [Rsrv] AS [Available Inv]
            FROM ROPData
            WHERE Item = 50002;

            -- 4. Usage and Vendor
            SELECT 'Usage and Vendor' AS [Title], [#/ft], [UOM], [$/ft], [con/wk], [Vndr]
            FROM ROPData
            WHERE Item = 50002;

            -- 5. Depletion Forecast
            SELECT 'When and how much purchase' AS [Question],
                [OnHand] - [Rsrv] AS [Available Inv],
                ([#/ft] * ([OnHand] - [Rsrv])) AS [Pounds],
                [$/ft] * ([OnHand] - [Rsrv]) AS [Dollars],
                ([OnHand] - [Rsrv]) / [con/wk] AS [Weeks],
                DATEADD(WEEK, ([OnHand] - [Rsrv]) / [con/wk], CAST(GETDATE() AS DATE)) AS [Expected Depletion Date]
            FROM ROPData
            WHERE Item = 50002;

            --6.- Purchases
            Select ROPDATA.[OnPO],ROP.[Rems], ROP.[Level] from ROPData, ROP WHERE ropdata.Item = 50002 and rop.imitem=50002;
            
            --7.- Max Inventory (Available + rems + PO
            select 
            ((ROPDATA.[#/ft] * (ROPDATA.[OnHand] - ROPDATA.[Rsrv]))  +
            ROP.[Rems] +
            ROPDATA.[Rsrv]) AS [Pounds]
            FROM ROPDATA, ROP
            where ropdata.Item = 50002 and rop.imitem=50002;



           DECLARE @item INT = 50002;
            DECLARE @onHand FLOAT;
            DECLARE @reserved FLOAT;
            DECLARE @rems FLOAT;
            DECLARE @Lb_ft FLOAT;
            DECLARE @quantity FLOAT;
            DECLARE @quantity_LbFt FLOAT;
            DECLARE @quantity_USDFt FLOAT;
            DECLARE @quantity_USD FLOAT;

            -- Get the values once
            SELECT 
                @onHand = ROPDATA.[OnHand],
                @reserved = ROPDATA.[Rsrv],
                @Lb_ft = ROPDATA.[#/ft],
                @quantity_USDFt = ROPDATA.[$/ft]
            FROM ROPDATA
            WHERE ROPDATA.Item = @item;

            -- Get Rems
            SELECT 
                @rems = ROP.[Rems]
            FROM ROP
            WHERE ROP.IMItem = @item;

            -- Do the math
            SET @quantity = ((@onHand - @reserved) + @rems + @reserved);
            SET @quantity_LbFt = (@quantity * @Lb_ft);
            SET @quantity_USD = (@quantity_LbFt * @quantity_USDFt);

            -- Show results
            SELECT 
                @quantity AS Quantity,
                @quantity_LbFt AS Quantity_Lbs,
                @quantity_USDFt AS PricePerFtUSD,
                @quantity_USD AS TotalValueUSD;


--///////////////////////////////////////////////

-- What is the data of ROP?
use Sigmatb;
SELECT DISTINCT CAST(Column3 AS VARCHAR(MAX)) AS Column3
FROM ROP;

--How many types 
SELECT 
    RTRIM(CAST(Column3 AS VARCHAR(MAX))) AS Type,
    COUNT(*) AS Total
FROM ROP
WHERE Column3 IS NOT NULL
GROUP BY RTRIM(CAST(Column3 AS VARCHAR(MAX)))
ORDER BY total DESC;

--how much
select IMITEM, column3, avail, 
from ROP where avail >0
order by avail desc;

-- add icons âšªâ¬›,
USE SigmaTB;

SELECT 
  ROP.IMITEM,  ROP.Column3,  ROP.Avail, ROP.[con], ROPData.[con/wk],
  (ROPData.[OnHand] - ROPData.[Rsrv]) / ROPData.[con/wk] AS [Weeks],
    DATEADD(WEEK, (ROPData.[OnHand] - ROPData.[Rsrv]) / ROPData.[con/wk], CAST(GETDATE() AS DATE)) AS [Expected Depletion Date],
  CASE 
    WHEN ROP.IMSIZ2 > 0 THEN 'O'
    ELSE 'â¬›'
  END AS Icon
FROM ROP, ROPDATA WHERE   ROPDAta.Item = ROP.IMITEM ORDER BY Avail DESC;
ROP.Avail > 0 AND


SELECT 
    ROP.IMITEM,  ROP.Column3,  ROP.Avail,  ROP.[con],  ROPData.[con/wk],
    (ROPData.[OnHand] - ROPData.[Rsrv]) / NULLIF(ROPData.[con/wk], 0)  AS [Weeks],
    DATEADD( WEEK,    (ROPData.[OnHand] - ROPData.[Rsrv]) / NULLIF(ROPData.[con/wk], 0),    CAST(GETDATE() AS DATE)  ) AS [Expected Depletion Date],
    ropdata.[$/ft] * (ropdata.[OnHand] - ropdata.[Rsrv]) AS [Dollars],
  CASE 
    WHEN ROP.IMSIZ2 > 0 THEN 'O'
    ELSE 'â¬›'
  END AS Icon
FROM ROP 
JOIN ROPDATA ON ROP.IMITEM = ROPDATA.Item
where ROP.Avail > 0
ORDER BY ROP.Avail DESC;

---IMPROVED QUERY TO AVOID MULTIPLE QUERIES FOR CALCULATIONS
SELECT 
    ROP.IMITEM,
    ROP.Column3,
    ROP.Avail,
    ROP.[con],
    ROPData.[con/wk],
    calc.AvailableFeet / NULLIF(ROPData.[con/wk], 0),  AS [Weeks],
    DATEADD(
        WEEK,
        calc.AvailableFeet / NULLIF(ROPData.[con/wk], 0),
        CAST(GETDATE() AS DATE)
    ) AS [Expected Depletion Date],
    ROPData.[$/ft] * calc.AvailableFeet AS [Dollars],
    CASE 
        WHEN ROP.IMSIZ2 > 0 THEN 'O'
        ELSE 'â¬›'
    END AS Icon
FROM ROP
JOIN ROPDATA ON ROP.IMITEM = ROPDATA.Item
CROSS APPLY (
    SELECT ROPDATA.[OnHand] - ROPDATA.[Rsrv] AS AvailableFeet
) AS calc
WHERE ROP.Avail > 0
ORDER BY ROP.Avail DESC;

CREATE NONCLUSTERED INDEX IX_ROP_IMITEM ON ROP(IMITEM);
CREATE NONCLUSTERED INDEX IX_ROPDATA_ITEM ON ROPDATA(Item);
