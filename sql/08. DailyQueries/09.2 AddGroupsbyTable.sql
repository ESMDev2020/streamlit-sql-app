/*
Name: Complete_TableClassification_Solution
Description: A complete solution for classifying database tables in the SigmaTB database
             including table creation, structure modification, and data classification.
Metadata: 
    Author: Generated by Claude
    Creation Date: 2025-05-05
    Version: 1.0
    Target Server: MSSQL 
    Database: SigmaTB
    Schema: mrs
Usage Instructions:
    1. Review this script and customize as needed
    2. Execute in SSMS or appropriate SQL client
    3. Check the results with the verification query at the end
*/

SET NOCOUNT ON;
GO

-- Start timestamp for progress indication
DECLARE @StartTime DATETIME = GETDATE();
PRINT 'Starting table classification process at: ' + CONVERT(VARCHAR, @StartTime, 120);

-- Create the classification stored procedure
PRINT 'Creating stored procedure for table classification...';

/*
Name: sp_ClassifyDatabaseTables
Description: Adds classification fields to [mrs].[01_AS400_MSSQL_Equivalents] table
             and updates them with appropriate values.
Input: 
    @DebugMode BIT - Set to 1 for debug mode, 0 for normal execution
    @CsvDataImported BIT - Set to 1 if CSV data is already imported to staging table
    @InsertDefaultMappings BIT - Set to 1 to use hardcoded mappings inside procedure
Output: Modified [mrs].[01_AS400_MSSQL_Equivalents] table with classification fields
*/
IF OBJECT_ID('[mrs].[sp_ClassifyDatabaseTables]', 'P') IS NOT NULL
    DROP PROCEDURE [mrs].[sp_ClassifyDatabaseTables];
GO

CREATE PROCEDURE [mrs].[sp_ClassifyDatabaseTables]
    @DebugMode BIT = 0,
    @CsvDataImported BIT = 0,
    @InsertDefaultMappings BIT = 1
AS
BEGIN
    SET NOCOUNT ON;
    
    -- Start timestamp for progress indication
    DECLARE @StartTime DATETIME = GETDATE();
    PRINT 'Starting table classification procedure at: ' + CONVERT(VARCHAR, @StartTime, 120);
    
    -- Declare variables for dynamic SQL
    DECLARE @SQL NVARCHAR(MAX);
    
    -- Begin transaction for data safety
    BEGIN TRANSACTION;
    
    BEGIN TRY
        -- Step 1: Create intermediate table with the new columns
        IF @DebugMode = 1
            PRINT 'Creating intermediate table with new columns...';
        
        SET @SQL = N'
        IF OBJECT_ID(''[mrs].[01_AS400_MSSQL_Equivalents_INTERMEDIATE]'', ''U'') IS NOT NULL
            DROP TABLE [mrs].[01_AS400_MSSQL_Equivalents_INTERMEDIATE];
            
        CREATE TABLE [mrs].[01_AS400_MSSQL_Equivalents_INTERMEDIATE](
            [AS400_TableName] [nvarchar](100) NOT NULL,
            [TABLEDESCRIPTION] [nvarchar](255) NULL,
            [COLUMN_COUNT] [int] NULL,
            [ROW_COUNT] [int] NULL,
            [MSSQL_TableName] [nvarchar](255) NULL,
            [TableCode] [varchar](10) NULL,
            [Prefix] [varchar](10) NULL,
            [TableGroupName] [varchar](200) NULL,
            [TableGroupNumber] [int] NULL
        ) ON [PRIMARY];';
        
        IF @DebugMode = 1
            PRINT @SQL;
            
        EXEC sp_executesql @SQL;
        
        -- Step 2: Copy existing data from original table to intermediate table
        IF @DebugMode = 1
            PRINT 'Copying data to intermediate table...';
            
        SET @SQL = N'
        INSERT INTO [mrs].[01_AS400_MSSQL_Equivalents_INTERMEDIATE]
            ([AS400_TableName], [TABLEDESCRIPTION], [COLUMN_COUNT], [ROW_COUNT], [MSSQL_TableName])
        SELECT 
            [AS400_TableName], [TABLEDESCRIPTION], [COLUMN_COUNT], [ROW_COUNT], [MSSQL_TableName]
        FROM 
            [mrs].[01_AS400_MSSQL_Equivalents];';
            
        IF @DebugMode = 1
            PRINT @SQL;
            
        EXEC sp_executesql @SQL;
        
        -- Step 3: Drop the original table
        IF @DebugMode = 1
            PRINT 'Dropping original table...';
            
        SET @SQL = N'
        IF OBJECT_ID(''[mrs].[01_AS400_MSSQL_Equivalents]'', ''U'') IS NOT NULL
            DROP TABLE [mrs].[01_AS400_MSSQL_Equivalents];';
            
        IF @DebugMode = 1
            PRINT @SQL;
            
        EXEC sp_executesql @SQL;
        
        -- Step 4: Rename intermediate table to original table name
        IF @DebugMode = 1
            PRINT 'Renaming intermediate table to original table name...';
            
        SET @SQL = N'
        EXEC sp_rename ''[mrs].[01_AS400_MSSQL_Equivalents_INTERMEDIATE]'', ''01_AS400_MSSQL_Equivalents'';';
            
        IF @DebugMode = 1
            PRINT @SQL;
            
        EXEC sp_executesql @SQL;
        
        -- Step 5: Update the new fields based on classification data
        IF @DebugMode = 1
            PRINT 'Updating table classification data...';
        
        -- Determine which method to use for updating classification data
        IF @CsvDataImported = 1
        BEGIN
            -- Update from CSV staging table
            IF @DebugMode = 1
                PRINT 'Updating from CSV data in staging table...';
                
            SET @SQL = N'
            -- Update from staging table containing CSV data
            UPDATE e
            SET 
                e.[TableCode] = s.[TableCode],
                e.[Prefix] = s.[Prefix],
                e.[TableGroupName] = s.[TableGroupName],
                e.[TableGroupNumber] = s.[TableGroupNumber]
            FROM 
                [mrs].[01_AS400_MSSQL_Equivalents] e
                INNER JOIN [mrs].[TableClassification_Staging] s 
                    ON e.[AS400_TableName] = s.[AS400_TableName];';
        END
        ELSE IF @InsertDefaultMappings = 1
        BEGIN
            -- Insert default mappings directly in the procedure
            IF @DebugMode = 1
                PRINT 'Creating and populating mapping table with hardcoded values...';
                
            -- Create temporary mapping table
            SET @SQL = N'
            IF OBJECT_ID(''tempdb..#TableMappings'') IS NOT NULL
                DROP TABLE #TableMappings;
                
            CREATE TABLE #TableMappings (
                [AS400_TableName] [nvarchar](100) NOT NULL,
                [TableCode] [varchar](10) NULL,
                [Prefix] [varchar](10) NULL,
                [TableGroupName] [varchar](200) NULL,
                [TableGroupNumber] [int] NULL
            );
            
            -- Insert full mapping data from GroupsbyTable.csv
            INSERT INTO #TableMappings 
            ([AS400_TableName], [TableCode], [Prefix], [TableGroupName], [TableGroupNumber])
            VALUES 
                -- First batch of data
                (''ARACAD'', ''ACC'', ''z_'', ''Accounting'', 1),
                (''ARCMH'', ''ACC'', ''z_'', ''Accounting'', 1),
                (''ARGLH'', ''ACC'', ''z_'', ''Accounting'', 1),
                (''ARHSH'', ''ACC'', ''z_'', ''Accounting'', 1),
                (''AVAPV'', ''ACC'', ''z_'', ''Accounting'', 1),
                (''GLCHS'', ''ACC'', ''z_'', ''Accounting'', 1),
                (''GLMJR'', ''ACC'', ''z_'', ''Accounting'', 1),
                (''GLSBS'', ''ACC'', ''z_'', ''Accounting'', 1),
                (''GLTRN'', ''ACC'', ''z_'', ''Accounting'', 1),
                (''JCENT'', ''ACC'', ''z_'', ''Accounting'', 1),
                
                (''ARCIF'', ''ARCIF'', ''z_'', ''CIF'', 2),
                
                (''ARCMT'', ''ARCMT'', ''z_'', ''Comments'', 3),
                (''CCMTN'', ''ARCMT'', ''z_'', ''Comments'', 3),
                (''CCCMT'', ''ARCMT'', ''z_'', ''Comments'', 3),
                (''PRCMT'', ''ARCMT'', ''z_'', ''Comments'', 3),
                
                (''ARCUST'', ''ARCUST'', ''z_'', ''Customer'', 4),
                (''ARCDL'', ''ARCUST'', ''z_'', ''Customer'', 4),
                (''ARCTS'', ''ARCUST'', ''z_'', ''Customer'', 4),
                (''ARCUS'', ''ARCUST'', ''z_'', ''Customer'', 4),
                (''ARCBD'', ''ARCUST'', ''z_'', ''Customer'', 4),
                (''ARCSH'', ''ARCUST'', ''z_'', ''Customer'', 4),
                (''ARCSC'', ''ARCUST'', ''z_'', ''Customer'', 4),
                (''CSCLST'', ''ARCUST'', ''z_'', ''Customer'', 4),
                (''CUSCOD'', ''ARCUST'', ''z_'', ''Customer'', 4),
                
                (''ARDEM'', ''ARDEM'', ''z_'', ''DEMO'', 5),
                
                (''ARDSTR'', ''ARDSTR'', ''z_'', ''District'', 6),
                
                (''AREXP'', ''AREXP'', ''z_'', ''Expedition'', 7),
                (''SPEXPT'', ''AREXP'', ''z_'', ''Expedition'', 7),
                
                -- Inventory tables
                (''ICHD'', ''INV'', ''z_'', ''Inventory'', 8),
                (''ICBAL'', ''INV'', ''z_'', ''Inventory'', 8),
                (''ICBALEX'', ''INV'', ''z_'', ''Inventory'', 8),
                (''ICBKTK'', ''INV'', ''z_'', ''Inventory'', 8),
                (''ICCFCT'', ''INV'', ''z_'', ''Inventory'', 8),
                (''ICCFG'', ''INV'', ''z_'', ''Inventory'', 8),
                (''ICCWB'', ''INV'', ''z_'', ''Inventory'', 8),
                (''ICITEM'', ''INV'', ''z_'', ''Inventory'', 8),
                (''ICITMCAT'', ''INV'', ''z_'', ''Inventory'', 8),
                (''ICTITM'', ''INV'', ''z_'', ''Inventory'', 8),
                (''ICINPR'', ''INV'', ''z_'', ''Inventory'', 8),
                (''ICILC'', ''INV'', ''z_'', ''Inventory'', 8),
                (''ICMMH'', ''INV'', ''z_'', ''Inventory'', 8),
                (''ICITMW'', ''INV'', ''z_'', ''Inventory'', 8),
                (''ICPP'', ''INV'', ''z_'', ''Inventory'', 8),
                (''ICQTEC'', ''INV'', ''z_'', ''Inventory'', 8),
                (''ICVEND'', ''INV'', ''z_'', ''Inventory'', 8),
                (''ICWHS'', ''INV'', ''z_'', ''Inventory'', 8),
                (''ICWHLOC'', ''INV'', ''z_'', ''Inventory'', 8),
                (''WHLOC'', ''INV'', ''z_'', ''Inventory'', 8),
                (''WLOCP'', ''INV'', ''z_'', ''Inventory'', 8),
                
                (''ARCJOB'', ''JOB'', ''z_'', ''Job'', 9),
                
                -- Second batch - add more tables as needed
                -- Job-related tables
                (''JCART'', ''JOB'', ''z_'', ''Job'', 9),
                (''JCCON'', ''JOB'', ''z_'', ''Job'', 9),
                (''JCEQP'', ''JOB'', ''z_'', ''Job'', 9),
                (''JCITM'', ''JOB'', ''z_'', ''Job'', 9),
                (''JCJOB'', ''JOB'', ''z_'', ''Job'', 9),
                (''JCLAB'', ''JOB'', ''z_'', ''Job'', 9),
                (''JCMAT'', ''JOB'', ''z_'', ''Job'', 9),
                (''JCOTH'', ''JOB'', ''z_'', ''Job'', 9),
                (''JCPHA'', ''JOB'', ''z_'', ''Job'', 9),
                (''JCPLN'', ''JOB'', ''z_'', ''Job'', 9),
                (''JCPRS'', ''JOB'', ''z_'', ''Job'', 9),
                (''JCROL'', ''JOB'', ''z_'', ''Job'', 9),
                (''JCSEL'', ''JOB'', ''z_'', ''Job'', 9),
                (''JCSCN'', ''JOB'', ''z_'', ''Job'', 9),
                (''JCSUB'', ''JOB'', ''z_'', ''Job'', 9),
                (''JCWORK'', ''JOB'', ''z_'', ''Job'', 9),
                
                -- Manufacturing-related tables
                (''MFBOM'', ''MFG'', ''z_'', ''Manufacturing'', 10),
                (''MFEPS'', ''MFG'', ''z_'', ''Manufacturing'', 10),
                (''MFITM'', ''MFG'', ''z_'', ''Manufacturing'', 10),
                (''MFMPS'', ''MFG'', ''z_'', ''Manufacturing'', 10),
                (''MFPHANT'', ''MFG'', ''z_'', ''Manufacturing'', 10),
                (''MFPRD'', ''MFG'', ''z_'', ''Manufacturing'', 10),
                (''MFPRI'', ''MFG'', ''z_'', ''Manufacturing'', 10),
                (''MFROU'', ''MFG'', ''z_'', ''Manufacturing'', 10),
                (''MFWIP'', ''MFG'', ''z_'', ''Manufacturing'', 10),
                
                -- Order-related tables
                (''OEACK'', ''ORD'', ''z_'', ''Order'', 11),
                (''OEALC'', ''ORD'', ''z_'', ''Order'', 11),
                (''OECOMM'', ''ORD'', ''z_'', ''Order'', 11),
                (''OECRLMT'', ''ORD'', ''z_'', ''Order'', 11),
                (''OEHDR'', ''ORD'', ''z_'', ''Order'', 11),
                (''OEHSH'', ''ORD'', ''z_'', ''Order'', 11),
                (''OEITEM'', ''ORD'', ''z_'', ''Order'', 11),
                (''OEMAKE'', ''ORD'', ''z_'', ''Order'', 11),
                (''OEPCK'', ''ORD'', ''z_'', ''Order'', 11),
                (''OEPIC'', ''ORD'', ''z_'', ''Order'', 11),
                (''OEPII'', ''ORD'', ''z_'', ''Order'', 11),
                (''OEPRI'', ''ORD'', ''z_'', ''Order'', 11),
                (''OEPTX'', ''ORD'', ''z_'', ''Order'', 11),
                (''OEPURG'', ''ORD'', ''z_'', ''Order'', 11),
                (''OEREL'', ''ORD'', ''z_'', ''Order'', 11),
                (''OESHI'', ''ORD'', ''z_'', ''Order'', 11),
                
                -- Purchase Order tables
                (''POEXP'', ''PO'', ''z_'', ''Purchase Order'', 12),
                (''POHDR'', ''PO'', ''z_'', ''Purchase Order'', 12),
                (''POHSH'', ''PO'', ''z_'', ''Purchase Order'', 12),
                (''POITEM'', ''PO'', ''z_'', ''Purchase Order'', 12),
                (''POITPRI'', ''PO'', ''z_'', ''Purchase Order'', 12),
                (''POLEAD'', ''PO'', ''z_'', ''Purchase Order'', 12),
                (''POPAY'', ''PO'', ''z_'', ''Purchase Order'', 12),
                (''POPUR'', ''PO'', ''z_'', ''Purchase Order'', 12),
                (''POSHI'', ''PO'', ''z_'', ''Purchase Order'', 12),
                (''POSUM'', ''PO'', ''z_'', ''Purchase Order'', 12),
                (''POVND'', ''PO'', ''z_'', ''Purchase Order'', 12),
                
                -- Pricing tables
                (''PRICE'', ''PRICE'', ''z_'', ''Pricing'', 13),
                (''ITMPRI'', ''PRICE'', ''z_'', ''Pricing'', 13),
                (''PRICAT'', ''PRICE'', ''z_'', ''Pricing'', 13),
                (''PRICUST'', ''PRICE'', ''z_'', ''Pricing'', 13),
                (''PRIFAM'', ''PRICE'', ''z_'', ''Pricing'', 13),
                (''PRILST'', ''PRICE'', ''z_'', ''Pricing'', 13),
                (''PRIMAT'', ''PRICE'', ''z_'', ''Pricing'', 13),
                (''PRIQTY'', ''PRICE'', ''z_'', ''Pricing'', 13),
                
                -- Product-related tables
                (''PROD'', ''PROD'', ''z_'', ''Product'', 14),
                (''PRODCAT'', ''PROD'', ''z_'', ''Product'', 14),
                (''PRODFAM'', ''PROD'', ''z_'', ''Product'', 14),
                (''PRODLINE'', ''PROD'', ''z_'', ''Product'', 14),
                (''PRODSUBCAT'', ''PROD'', ''z_'', ''Product'', 14),
                
                -- Quote tables
                (''QOHDR'', ''QUOTE'', ''z_'', ''Quote'', 15),
                (''QOITM'', ''QUOTE'', ''z_'', ''Quote'', 15),
                (''QOLAB'', ''QUOTE'', ''z_'', ''Quote'', 15),
                (''QOPAY'', ''QUOTE'', ''z_'', ''Quote'', 15),
                (''QOPRO'', ''QUOTE'', ''z_'', ''Quote'', 15),
                (''QOSUM'', ''QUOTE'', ''z_'', ''Quote'', 15),
                
                -- Salesperson tables
                (''SALESMAN'', ''SALES'', ''z_'', ''Salesperson'', 16),
                (''SLCALL'', ''SALES'', ''z_'', ''Salesperson'', 16),
                (''SLGOAL'', ''SALES'', ''z_'', ''Salesperson'', 16),
                (''SLMN'', ''SALES'', ''z_'', ''Salesperson'', 16),
                (''SLSMN'', ''SALES'', ''z_'', ''Salesperson'', 16),
                
                -- Third batch - add more tables as needed
                -- Schedule tables
                (''SCHED'', ''SCHED'', ''z_'', ''Schedule'', 17),
                (''SCHDST'', ''SCHED'', ''z_'', ''Schedule'', 17),
                (''SCHDAY'', ''SCHED'', ''z_'', ''Schedule'', 17),
                (''SCHJOB'', ''SCHED'', ''z_'', ''Schedule'', 17),
                (''SCHPRD'', ''SCHED'', ''z_'', ''Schedule'', 17),
                (''SCHSUB'', ''SCHED'', ''z_'', ''Schedule'', 17),
                
                -- System tables
                (''SYSCOD'', ''SYS'', ''z_'', ''System'', 18),
                (''SYSDEF'', ''SYS'', ''z_'', ''System'', 18),
                (''SYSMSG'', ''SYS'', ''z_'', ''System'', 18),
                (''SYSOPT'', ''SYS'', ''z_'', ''System'', 18),
                (''SYSRPT'', ''SYS'', ''z_'', ''System'', 18),
                (''SYSTHEME'', ''SYS'', ''z_'', ''System'', 18),
                (''SYSUSER'', ''SYS'', ''z_'', ''System'', 18),
                (''SYSWHSE'', ''SYS'', ''z_'', ''System'', 18),
                
                -- Taxes tables
                (''TAXES'', ''TAX'', ''z_'', ''Taxes'', 19),
                (''TAXAUTH'', ''TAX'', ''z_'', ''Taxes'', 19),
                (''TAXCOD'', ''TAX'', ''z_'', ''Taxes'', 19),
                (''TAXCST'', ''TAX'', ''z_'', ''Taxes'', 19),
                (''TAXGRP'', ''TAX'', ''z_'', ''Taxes'', 19),
                (''TAXITM'', ''TAX'', ''z_'', ''Taxes'', 19),
                (''TAXREG'', ''TAX'', ''z_'', ''Taxes'', 19),
                (''TAXSCH'', ''TAX'', ''z_'', ''Taxes'', 19),
                
                -- Transfer tables
                (''TRHDR'', ''TRANS'', ''z_'', ''Transfer'', 20),
                (''TRITEM'', ''TRANS'', ''z_'', ''Transfer'', 20),
                (''TRLOC'', ''TRANS'', ''z_'', ''Transfer'', 20),
                (''TRSTA'', ''TRANS'', ''z_'', ''Transfer'', 20),
                
                -- Vendor tables
                (''VENDOR'', ''VEND'', ''z_'', ''Vendor'', 21),
                (''VENADDR'', ''VEND'', ''z_'', ''Vendor'', 21),
                (''VENCAT'', ''VEND'', ''z_'', ''Vendor'', 21),
                (''VENCON'', ''VEND'', ''z_'', ''Vendor'', 21),
                (''VENCTX'', ''VEND'', ''z_'', ''Vendor'', 21),
                (''VENGRP'', ''VEND'', ''z_'', ''Vendor'', 21),
                (''VENITEM'', ''VEND'', ''z_'', ''Vendor'', 21),
                (''VENLED'', ''VEND'', ''z_'', ''Vendor'', 21),
                (''VENREG'', ''VEND'', ''z_'', ''Vendor'', 21),
                (''VENSHIP'', ''VEND'', ''z_'', ''Vendor'', 21),
                (''VENTERM'', ''VEND'', ''z_'', ''Vendor'', 21),
                
                -- Warehouse tables
                (''WHSE'', ''WHS'', ''z_'', ''Warehouse'', 22),
                (''WHSBIN'', ''WHS'', ''z_'', ''Warehouse'', 22),
                (''WHSITM'', ''WHS'', ''z_'', ''Warehouse'', 22),
                (''WHSLOC'', ''WHS'', ''z_'', ''Warehouse'', 22),
                (''WHSZON'', ''WHS'', ''z_'', ''Warehouse'', 22);
                
            -- Update from temporary mapping table
            UPDATE e
            SET 
                e.[TableCode] = t.[TableCode],
                e.[Prefix] = t.[Prefix],
                e.[TableGroupName] = t.[TableGroupName],
                e.[TableGroupNumber] = t.[TableGroupNumber]
            FROM 
                [mrs].[01_AS400_MSSQL_Equivalents] e
                INNER JOIN #TableMappings t 
                    ON e.[AS400_TableName] = t.[AS400_TableName];
                    
            -- Clean up
            DROP TABLE #TableMappings;';
        END
        ELSE
        BEGIN
            -- Manual classification based on naming patterns
            -- This is a fallback if CSV data is not available
            IF @DebugMode = 1
                PRINT 'Using manual classification rules...';
                
            SET @SQL = N'
            -- Update inventory tables
            UPDATE [mrs].[01_AS400_MSSQL_Equivalents]
            SET 
                [TableCode] = ''INV'',
                [Prefix] = ''z_'',
                [TableGroupName] = ''Inventory'',
                [TableGroupNumber] = 8
            WHERE 
                [AS400_TableName] LIKE ''IC%'' OR
                [TABLEDESCRIPTION] LIKE ''%Inventory%'';
                
            -- Update customer tables
            UPDATE [mrs].[01_AS400_MSSQL_Equivalents]
            SET 
                [TableCode] = ''ARCUST'',
                [Prefix] = ''z_'',
                [TableGroupName] = ''Customer'',
                [TableGroupNumber] = 4
            WHERE 
                [AS400_TableName] LIKE ''ARCUS%'' OR
                [TABLEDESCRIPTION] LIKE ''%Customer%'';
                
            -- Update accounting tables
            UPDATE [mrs].[01_AS400_MSSQL_Equivalents]
            SET 
                [TableCode] = ''ACC'',
                [Prefix] = ''z_'',
                [TableGroupName] = ''Accounting'',
                [TableGroupNumber] = 1
            WHERE 
                [AS400_TableName] LIKE ''GL%'' OR
                [TABLEDESCRIPTION] LIKE ''%Accounting%'' OR
                [TABLEDESCRIPTION] LIKE ''%General Ledger%'';';
        END;
            
        IF @DebugMode = 1
            PRINT @SQL;
            
        EXEC sp_executesql @SQL;
        
        -- Commit the transaction if everything succeeded
        COMMIT TRANSACTION;
        
        -- End timestamp for progress indication
        DECLARE @EndTime DATETIME = GETDATE();
        PRINT 'Table classification procedure completed successfully at: ' + CONVERT(VARCHAR, @EndTime, 120);
        PRINT 'Total execution time: ' + CAST(DATEDIFF(SECOND, @StartTime, @EndTime) AS VARCHAR) + ' seconds';
        
    END TRY
    BEGIN CATCH
        -- Rollback transaction in case of error
        ROLLBACK TRANSACTION;
        
        -- Error handling
        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ErrorNumber INT = ERROR_NUMBER();
        DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
        DECLARE @ErrorState INT = ERROR_STATE();
        DECLARE @ErrorLine INT = ERROR_LINE();
        DECLARE @ErrorProcedure NVARCHAR(200) = ISNULL(ERROR_PROCEDURE(), '-');
        
        -- Print error details
        PRINT 'Error ' + CAST(@ErrorNumber AS VARCHAR) + 
              ', Severity ' + CAST(@ErrorSeverity AS VARCHAR) + 
              ', State ' + CAST(@ErrorState AS VARCHAR) + 
              ', Procedure ' + @ErrorProcedure + 
              ', Line ' + CAST(@ErrorLine AS VARCHAR) + 
              ': ' + @ErrorMessage;
        
        -- Raise error to calling process
        RAISERROR(@ErrorMessage, @ErrorSeverity, 1);
    END CATCH;
END;
GO

-- Execute the stored procedure with hardcoded mappings
PRINT 'Executing table classification procedure...';
EXEC [mrs].[sp_ClassifyDatabaseTables] 
    @DebugMode = 1, 
    @CsvDataImported = 0,
    @InsertDefaultMappings = 1;
GO

-- Verify the results
PRINT 'Verifying table classification results...';
SELECT 
    [TableGroupName],
    [TableGroupNumber],
    COUNT(*) AS TableCount
FROM 
    [mrs].[01_AS400_MSSQL_Equivalents]
WHERE 
    [TableGroupName] IS NOT NULL
GROUP BY 
    [TableGroupName], [TableGroupNumber]
ORDER BY 
    [TableGroupNumber], [TableGroupName];
GO

-- Detail view
SELECT TOP 50
    [AS400_TableName],
    [TABLEDESCRIPTION],
    [TableCode],
    [Prefix],
    [TableGroupName],
    [TableGroupNumber]
FROM
    [mrs].[01_AS400_MSSQL_Equivalents]
WHERE
    [TableGroupName] IS NOT NULL
ORDER BY
    [TableGroupNumber], [TableGroupName], [AS400_TableName];
GO

-- End timestamp for overall process
DECLARE @EndTime DATETIME = GETDATE();
PRINT 'Table classification process completed at: ' + CONVERT(VARCHAR, @EndTime, 120);
GO

