 
USE SigmaTB;


-- create ROP data table
CREATE TABLE ROPData (
    [Unnamed: 0] VARCHAR(34),
    [Unnamed: 1] VARCHAR(6),
    [Unnamed: 2] VARCHAR(8),
    [Unnamed: 3] VARCHAR(8),
    [Unnamed: 4] VARCHAR(8),
    [Unnamed: 5] VARCHAR(13),
    [Unnamed: 6] VARCHAR(8),
    [Unnamed: 7] VARCHAR(7),
    [Unnamed: 8] VARCHAR(7),
    [Unnamed: 9] VARCHAR(8),
    [Unnamed: 10] VARCHAR(8),
    [Unnamed: 11] VARCHAR(16),
    [Unnamed: 12] VARCHAR(8),
    [Unnamed: 13] VARCHAR(9),
    [Unnamed: 14] VARCHAR(9),
    [Unnamed: 15] VARCHAR(9),
    [Unnamed: 16] VARCHAR(7),
    [Unnamed: 17] VARCHAR(7),
    [Unnamed: 18] VARCHAR(9),
    [Unnamed: 19] VARCHAR(9),
    [Unnamed: 20] VARCHAR(9),
    [Unnamed: 21] DECIMAL(18,2),
    [Unnamed: 22] DECIMAL(18,2),
    [Unnamed: 23] VARCHAR(7),
    [Unnamed: 24] DECIMAL(18,2),
    [Unnamed: 25] DECIMAL(18,2),
    [Unnamed: 26] DECIMAL(18,2),
    [Unnamed: 27] DECIMAL(18,2),
    [Unnamed: 28] DECIMAL(18,2)
);

--Create BasePrice table
CREATE TABLE BasePrice (
    [IOITEM] INT,
    [IOBPRC] DECIMAL(18,2)
);

--Create SalesData table
CREATE TABLE SalesData (
    [OORECD] VARCHAR(6),
    [ODTYPE] VARCHAR(6),
    [ODITEM] VARCHAR(6),
    [OOCUST] VARCHAR(6),
    [ODTLBS] VARCHAR(8),
    [ ODTFTS ] VARCHAR(11),
    [ ODORDR ] VARCHAR(6),
    [ CALPHA ] VARCHAR(26),
    [ 00009 ] INT,
    [Unnamed: 9] INT,
    [Unnamed: 10] VARCHAR(11),
    [Unnamed: 11] DECIMAL(18,2),
    [ 22,121.244 ] DECIMAL(18,2)
);

--Create UsageData table
CREATE TABLE UsageData (
    [Unnamed: 0] VARCHAR(6),
    [Unnamed: 1] VARCHAR(6),
    [Unnamed: 2] VARCHAR(6),
    [Unnamed: 3] VARCHAR(8),
    [Unnamed: 4] VARCHAR(8),
    [ Start Date ] VARCHAR(9),
    [Unnamed: 6] VARCHAR(8),
    [Unnamed: 7] VARCHAR(8),
    [Unnamed: 8] VARCHAR(8),
    [Unnamed: 9] VARCHAR(8),
    [2024 02 29] VARCHAR(31),
    [ item_XxDocmntVendrCstmrDatedate ] VARCHAR(10),
    [Unnamed: 12] VARCHAR(7),
    [Unnamed: 13] DECIMAL(18,2),
    [Unnamed: 14] VARCHAR(6),
    [Unnamed: 15] VARCHAR(3),
    [Unnamed: 16] DECIMAL(18,2),
    [Unnamed: 17] DECIMAL(18,2),
    [Unnamed: 18] VARCHAR(6),
    [Unnamed: 19] DECIMAL(18,2),
    [Unnamed: 20] DECIMAL(18,2),
    [Unnamed: 21] DECIMAL(18,2),
    [Unnamed: 22] VARCHAR(6),
    [Unnamed: 23] VARCHAR(6),
    [Unnamed: 24] VARCHAR(8),
    [Unnamed: 25] VARCHAR(29),
    [Unnamed: 26] DECIMAL(18,2)
);

--Create TagData
CREATE TABLE TagData (
    [Item] VARCHAR(6),
    [Tag] VARCHAR(7),
    [Description] VARCHAR(20),
    [Pc Len] VARCHAR(6),
    [Pcs] VARCHAR(6),
    [ Length ] VARCHAR(9),
    [ Heat ] VARCHAR(8),
    [ Lot ] VARCHAR(8),
    [ Loc ] VARCHAR(8),
    [ OnHand ] VARCHAR(9),
    [ Reserved ] VARCHAR(9),
    [ Avail ] VARCHAR(9),
    [Unnamed: 12] VARCHAR(28),
    [ remnants ] VARCHAR(6),
    [Unnamed: 14] DECIMAL(18,2),
    [Unnamed: 15] VARCHAR(7),
    [Unnamed: 16] DECIMAL(18,2)
);

-- Create POData
CREATE TABLE POData (
    [ PO ] VARCHAR(8),
    [ V# ] VARCHAR(8),
    [Vendor] VARCHAR(8),
    [Code] VARCHAR(6),
    [Item] VARCHAR(6),
    [Description] VARCHAR(24),
    [Original] VARCHAR(10),
    [Due Date] VARCHAR(10),
    [Received] VARCHAR(10),
    [ Ordered ] VARCHAR(8),
    [ Received ] VARCHAR(8),
    [UOM] VARCHAR(6),
    [ Due ] VARCHAR(8),
    [Unnamed: 13] DECIMAL(18,2),
    [Unnamed: 14] VARCHAR(8),
    [Unnamed: 15] VARCHAR(7),
    [Unnamed: 16] VARCHAR(20),
    [Unnamed: 17] VARCHAR(6),
    [Unnamed: 18] VARCHAR(6),
    [Unnamed: 19] VARCHAR(32),
    [Unnamed: 20] VARCHAR(10),
    [Unnamed: 21] VARCHAR(10),
    [Unnamed: 22] VARCHAR(10),
    [Unnamed: 23] VARCHAR(8),
    [Unnamed: 24] VARCHAR(9),
    [Unnamed: 25] VARCHAR(6),
    [Unnamed: 26] VARCHAR(8)
);

--Verify that the tables were created
Select TABLE_NAME from INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';

--check permissions
SELECT SUSER_NAME();



--Enable FileAccess for SQL server
EXEC sp_configure 'show advanced options', 1;
RECONFIGURE;
EXEC sp_configure 'Ad Hoc Distributed Queries', 1;
RECONFIGURE;

--Get the CSV files into the S3 repository into the RDC environment.. crazy complexity
EXEC msdb.dbo.rds_download_from_s3
    'arn:aws:s3:::esmbucket2/ROPData.csv',  -- S3 file ARN
    'D:\S3\ROPData.csv',  -- Target path in RDS
    1;  -- Overwrite if file exists

--Verify if file was imported
EXEC msdb.dbo.rds_file_list;

--Edition doesnt allow
SELECT SERVERPROPERTY('Edition'), SERVERPROPERTY('EngineEdition');


--Verify the import
SELECT * FROM ROPData;


BULK INSERT BasePrice FROM '/Users/bmate/Downloads/BasePrice.csv'


-- Now, import the data
BULK INSERT BasePrice FROM 'C:\Administrator\Downloads\BasePrice.csv'
WITH (FORMAT = 'CSV', FIRSTROW = 2, FIELDTERMINATOR = ',', ROWTERMINATOR = '\n', TABLOCK);

BULK INSERT ROPData FROM 'C:\Administrator\Downloads\ROPData.csv'
WITH (FORMAT = 'CSV', FIRSTROW = 2, FIELDTERMINATOR = ',', ROWTERMINATOR = '\n', TABLOCK);

BULK INSERT SalesData FROM 'C:\Administrator\Downloads\SalesData.csv'
WITH (FORMAT = 'CSV', FIRSTROW = 2, FIELDTERMINATOR = ',', ROWTERMINATOR = '\n', TABLOCK);

BULK INSERT UsageData FROM 'C:\Administrator\Downloads\UsageData.csv'
WITH (FORMAT = 'CSV', FIRSTROW = 2, FIELDTERMINATOR = ',', ROWTERMINATOR = '\n', TABLOCK);

BULK INSERT TagData FROM 'C:\Administrator\Downloads\TagData.csv'
WITH (FORMAT = 'CSV', FIRSTROW = 2, FIELDTERMINATOR = ',', ROWTERMINATOR = '\n', TABLOCK);

BULK INSERT POData FROM 'C:\Administrator\Downloads\POData.csv'
WITH (FORMAT = 'CSV', FIRSTROW = 2, FIELDTERMINATOR = ',', ROWTERMINATOR = '\n', TABLOCK);


--Delete all tables and start again
DECLARE @sql NVARCHAR(MAX) = N'';

-- Generate DROP TABLE commands for all user tables
SELECT @sql += 'DROP TABLE IF EXISTS ' + QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME) + '; ' + CHAR(13)
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_TYPE = 'BASE TABLE';

-- Execute the generated SQL
EXEC sp_executesql @sql;

-- end deleting tables


--///////////////////////////////////////
--add
ALTER TABLE BasePrice
ADD IOITEM_int INT NULL,
    IOBPRC_num NUMERIC(10, 2) NULL;


--copy
UPDATE BasePrice
SET IOITEM_int = TRY_CAST(CAST(IOITEM AS VARCHAR) AS INT),
    IOBPRC_num = TRY_CAST(CAST(IOBPRC AS VARCHAR) AS NUMERIC(10, 2));

--drop
ALTER TABLE BasePrice
DROP COLUMN IOITEM;

ALTER TABLE BasePrice
DROP COLUMN IOBPRC;

-- rename
EXEC sp_rename 'BasePrice.IOITEM_int', 'IOITEM', 'COLUMN';
EXEC sp_rename 'BasePrice.IOBPRC_num', 'IOBPRC', 'COLUMN';

--///////////////////////////////////////////

--GET THE NAME AND DATATYPE OF FIELDS - INFORMATION SCHEMA
SELECT 
    COLUMN_NAME, 
    DATA_TYPE, 
    CHARACTER_MAXIMUM_LENGTH,
    IS_NULLABLE
FROM 
    INFORMATION_SCHEMA.COLUMNS
WHERE 
    TABLE_NAME = 'ROPData'  -- Replace with your actual table name
    AND TABLE_SCHEMA = 'dbo';


--////////////////////////////////////////////////////////
--GET THE NAME AND DATATYPE FROM SYS.COLUMNS
use sigmatb;

SELECT 
    c.name AS ColumnName,
    t.name AS DataType,
    c.max_length AS MaxLength,
    c.precision,
    c.scale,
    CASE 
        WHEN c.is_nullable = 1 THEN 'YES'
        ELSE 'NO'
    END AS IsNullable
FROM 
    sys.columns c
JOIN 
    sys.types t ON c.user_type_id = t.user_type_id
WHERE 
    c.object_id = OBJECT_ID('dbo.ROPData');  -- Replace with your table name

--///////////////////////////////////////////////////////

USE SigmaTB;

CREATE TABLE VendorLead (
    [Unique] BIT,                -- Whether the row is unique/applicable (converted from TRUE/FALSE)
    Description NVARCHAR(255),   -- Description of the vendor or group
    Notes NVARCHAR(255),         -- Additional notes or alternate name
    Code NVARCHAR(10),           -- Short code for the vendor
    wks INT,                     -- Lead time in weeks (may include -363, for review)
    Used INT,                    -- Number of times used
    Updated DATE,                -- Last update date
    Delivery DATE                -- Optional delivery date (some values may be empty)
);


-- Check if the column exists, then drop it
IF EXISTS (
    SELECT 1 
    FROM sys.columns 
    WHERE Name = N'GLREF_REV' AND Object_ID = Object_ID(N'GLTRANS')
)
BEGIN
    ALTER TABLE GLTRANS DROP COLUMN GLREF_REV;
END

/************************************
Check indexes
***************************************/
SELECT 
    i.name AS IndexName,
    i.type_desc AS IndexType,
    c.name AS ColumnName,
    ic.key_ordinal AS OrdinalPosition
FROM sys.indexes i
JOIN sys.index_columns ic ON i.object_id = ic.object_id AND i.index_id = ic.index_id
JOIN sys.columns c ON ic.object_id = c.object_id AND ic.column_id = c.column_id
WHERE i.object_id = OBJECT_ID('GLTRANS')
  AND c.name = 'GLREF_REV';


/************************************
***************************************/
use sigmatb;
select top 1 * from gltrans

-- Step 1: Add reverse-computed column
ALTER TABLE GLTRANS
ADD GLREF_REV AS REVERSE(GLREF) PERSISTED;

-- Step 2: Index the computed column
CREATE INDEX IX_GLTRANS_GLREF_REV ON GLTRANS(GLREF_REV);

-- List all columns in GLTRANS
SELECT 
    COLUMN_NAME, 
    DATA_TYPE, 
    CHARACTER_MAXIMUM_LENGTH, 
    IS_NULLABLE
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'GLTRANS';

-- Get the index info
SELECT 
    i.name AS IndexName,
    i.type_desc AS IndexType,
    c.name AS ColumnName,
    ic.key_ordinal AS OrdinalPosition,
    ic.is_descending_key AS IsDescending
FROM sys.indexes i
JOIN sys.index_columns ic ON i.object_id = ic.object_id AND i.index_id = ic.index_id
JOIN sys.columns c ON ic.object_id = c.object_id AND ic.column_id = c.column_id
WHERE i.object_id = OBJECT_ID('GLTRANS')
ORDER BY i.name, ic.key_ordinal;


